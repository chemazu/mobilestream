[{"/Users/user/Documents/mobilestreamapp/client/src/index.js":"1","/Users/user/Documents/mobilestreamapp/client/src/App.js":"2","/Users/user/Documents/mobilestreamapp/client/src/reportWebVitals.js":"3","/Users/user/Documents/mobilestreamapp/client/src/Stream.js":"4","/Users/user/Documents/mobilestreamapp/client/src/Watch.js":"5"},{"size":629,"mtime":1694338813963,"results":"6","hashOfConfig":"7"},{"size":480,"mtime":1694358440619,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1694335167556,"results":"9","hashOfConfig":"7"},{"size":3146,"mtime":1694367769813,"results":"10","hashOfConfig":"7"},{"size":2005,"mtime":1694438225774,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1lo8vah",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/user/Documents/mobilestreamapp/client/src/index.js",[],[],[],"/Users/user/Documents/mobilestreamapp/client/src/App.js",[],[],"/Users/user/Documents/mobilestreamapp/client/src/reportWebVitals.js",[],[],"/Users/user/Documents/mobilestreamapp/client/src/Stream.js",["29","30"],[],"import React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Peer from \"peerjs\";\nimport { MediaPlayer, MediaOutlet, MediaCommunitySkin } from \"@vidstack/react\";\n\nexport default function Stream() {\n  let [one, setOne] = useState(\"\");\n  \n  let [screensharingStatus, setScreensharingStatus] = useState();\n\n  const socket = io(\"http://localhost:5000\");\n  // const socket = io(\"\");\n\n  const myVideoRef = useRef();\n\n  let roomid = 1;\n  const peerRef = useRef();\n\n  const initPeer = () => {\n    const peerInstance = new Peer();\n\n    peerRef.current = peerInstance;\n\n    peerInstance.on(\"open\", (peerId) => {\n      console.log(\"Connected to PeerJS with ID:\", peerId);\n      socket.emit(\"broadcaster\", roomid, peerId);\n    });\n    if (screensharingStatus) {\n      console.log(screensharingStatus);\n      navigator.mediaDevices\n        .getDisplayMedia({ video: true, audio: true })\n        .then((stream) => {\n          socket.emit(\"startScreenSharing\", roomid);\n          setOne(stream);\n          peerInstance.on(\"call\", (call) => {\n            console.log(\"Incoming call:\", call);\n            call.answer(stream);\n            // Answer the incoming call and send our stream\n\n            call.on(\"stream\", (remoteStream) => {\n              console.log(\"first verse\");\n              // Handle the remote stream as needed\n            });\n          });\n        })\n        .catch((error) =>\n          console.error(\"Error accessing media devices:\", error)\n        );\n    } else {\n      navigator.mediaDevices\n        .getUserMedia({ audio: true, video: true })\n        .then((stream) => {\n          // myVideoRef.current.srcObject = stream;\n          console.log(\"Stream obtained successfully:\", stream);\n          setOne(stream);\n          peerInstance.on(\"call\", (call) => {\n            console.log(\"Incoming call:\", call);\n            call.answer(stream);\n            // Answer the incoming call and send our stream\n\n            call.on(\"stream\", (remoteStream) => {\n              console.log(\"first verse\");\n              // Handle the remote stream as needed\n            });\n          });\n        })\n        .catch((error) =>\n          console.error(\"Error accessing media devices:\", error)\n        );\n    }\n  };\n  const toggleScreen = () => {\n    console.log(\"\");\n   \n    setScreensharingStatus(true);\n  };\n  useEffect(() => {\n    initPeer();\n\n    return () => {\n      // Cleanup code (e.g., disconnect from the socket, close peer connections)\n    };\n  }, [screensharingStatus]);\n\n  return (\n    <div>\n      <MediaPlayer\n        title=\"Tuturly Classroom\"\n        poster=\"https://image.mux.com/VZtzUzGRv02OhRnZCxcNg49OilvolTqdnFLEqBsTwaxU/thumbnail.webp?time=268&width=980\"\n        thumbnails=\"https://media-files.vidstack.io/sprite-fight/thumbnails.vtt\"\n        aspectRatio={16 / 9}\n        autoplay={true}\n       \n        src={one}\n        playsinline={true}\n\n      >\n        <MediaOutlet/>\n      \n       \n        <MediaCommunitySkin />\n      </MediaPlayer>\n      <button\n        onClick={() => {\n          toggleScreen();\n        }}\n      >\n        Toggle ScreenSharing\n      </button>\n    </div>\n  );\n}\n","/Users/user/Documents/mobilestreamapp/client/src/Watch.js",["31","32","33"],[],{"ruleId":"34","severity":1,"message":"35","line":14,"column":9,"nodeType":"36","messageId":"37","endLine":14,"endColumn":19},{"ruleId":"38","severity":1,"message":"39","line":83,"column":6,"nodeType":"40","endLine":83,"endColumn":27,"suggestions":"41"},{"ruleId":"34","severity":1,"message":"42","line":12,"column":3,"nodeType":"36","messageId":"37","endLine":12,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":17,"column":9,"nodeType":"36","messageId":"37","endLine":17,"endColumn":19},{"ruleId":"38","severity":1,"message":"43","line":63,"column":6,"nodeType":"40","endLine":63,"endColumn":8,"suggestions":"44"},"no-unused-vars","'myVideoRef' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initPeer'. Either include it or remove the dependency array.","ArrayExpression",["45"],"'MediaPoster' is defined but never used.","React Hook useEffect has missing dependencies: 'roomid' and 'socket'. Either include them or remove the dependency array.",["46"],{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [initPeer, screensharingStatus]",{"range":"51","text":"52"},"Update the dependencies array to be: [roomid, socket]",{"range":"53","text":"54"},[2496,2517],"[initPeer, screensharingStatus]",[1667,1669],"[roomid, socket]"]