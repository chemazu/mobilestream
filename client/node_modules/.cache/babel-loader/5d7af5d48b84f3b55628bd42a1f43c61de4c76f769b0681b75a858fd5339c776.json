{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/mobilestreamapp/client/src/Stream.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Peer from \"peerjs\";\nimport { io } from \"socket.io-client\";\nimport { MediaPlayer, MediaOutlet, MediaCommunitySkin } from \"@vidstack/react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stream() {\n  _s();\n  const socket = io(\"http://localhost:5000\");\n  const myVideoRef = useRef();\n  const {\n    id\n  } = useParams();\n  const roomid = id;\n  const [stream, setStream] = useState(null);\n  const [screensharing, setScreensharing] = useState(false);\n  const [peerId, setPeerId] = useState(null);\n  const initPeer = () => {\n    const peerInstance = new Peer();\n    peerInstance.on(\"open\", peerId => {\n      setPeerId(peerId);\n      socket.emit(\"broadcaster\", roomid, peerId);\n    });\n    peerInstance.on(\"call\", call => {\n      if (screensharing) {\n        navigator.mediaDevices.getDisplayMedia({\n          video: true,\n          audio: true\n        }).then(stream => {\n          socket.emit(\"startScreenSharing\", roomid);\n          setStream(stream);\n          call.answer(stream);\n          call.on(\"stream\", remoteStream => {\n            // Handle the remote stream as needed\n          });\n        }).catch(error => console.error(\"Error accessing media devices:\", error));\n      } else {\n        navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: true\n        }).then(stream => {\n          setStream(stream);\n          call.answer(stream);\n          call.on(\"stream\", remoteStream => {\n            // Handle the remote stream as needed\n          });\n        }).catch(error => console.error(\"Error accessing media devices:\", error));\n      }\n    });\n  };\n  const toggleScreenSharing = () => {\n    setScreensharing(!screensharing);\n  };\n  useEffect(() => {\n    initPeer();\n    return () => {\n      // Cleanup code (e.g., disconnect from the socket, close peer connections)\n    };\n  }, [screensharing, roomid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MediaPlayer, {\n      title: \"Tuturly Classroom\",\n      poster: \"https://image.mux.com/VZtzUzGRv02OhRnZCxcNg49OilvolTqdnFLEqBsTwaxU/thumbnail.webp?time=268&width=980\",\n      thumbnails: \"https://media-files.vidstack.io/sprite-fight/thumbnails.vtt\",\n      aspectRatio: 16 / 9,\n      autoplay: true,\n      src: stream,\n      playsinline: true,\n      children: [/*#__PURE__*/_jsxDEV(MediaOutlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MediaCommunitySkin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleScreenSharing,\n      children: screensharing ? \"Stop Screen Sharing\" : \"Start Screen Sharing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(Stream, \"/08S5fvUcnGFOk3+x1WXWImlYMY=\", false, function () {\n  return [useParams];\n});\n_c = Stream;\nvar _c;\n$RefreshReg$(_c, \"Stream\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Peer","io","MediaPlayer","MediaOutlet","MediaCommunitySkin","useParams","jsxDEV","_jsxDEV","Stream","_s","socket","myVideoRef","id","roomid","stream","setStream","screensharing","setScreensharing","peerId","setPeerId","initPeer","peerInstance","on","emit","call","navigator","mediaDevices","getDisplayMedia","video","audio","then","answer","remoteStream","catch","error","console","getUserMedia","toggleScreenSharing","children","title","poster","thumbnails","aspectRatio","autoplay","src","playsinline","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/user/Documents/mobilestreamapp/client/src/Stream.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport Peer from \"peerjs\";\nimport { io } from \"socket.io-client\";\nimport { MediaPlayer, MediaOutlet, MediaCommunitySkin } from \"@vidstack/react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function Stream() {\n  const socket = io(\"http://localhost:5000\");\n  const myVideoRef = useRef();\n  const { id } = useParams();\n  const roomid = id;\n\n  const [stream, setStream] = useState(null);\n  const [screensharing, setScreensharing] = useState(false);\n  const [peerId, setPeerId] = useState(null);\n\n  const initPeer = () => {\n    const peerInstance = new Peer();\n\n    peerInstance.on(\"open\", (peerId) => {\n      setPeerId(peerId);\n      socket.emit(\"broadcaster\", roomid, peerId);\n    });\n\n    peerInstance.on(\"call\", (call) => {\n      if (screensharing) {\n        navigator.mediaDevices\n          .getDisplayMedia({ video: true, audio: true })\n          .then((stream) => {\n            socket.emit(\"startScreenSharing\", roomid);\n            setStream(stream);\n            call.answer(stream);\n\n            call.on(\"stream\", (remoteStream) => {\n              // Handle the remote stream as needed\n            });\n          })\n          .catch((error) => console.error(\"Error accessing media devices:\", error));\n      } else {\n        navigator.mediaDevices\n          .getUserMedia({ audio: true, video: true })\n          .then((stream) => {\n            setStream(stream);\n            call.answer(stream);\n\n            call.on(\"stream\", (remoteStream) => {\n              // Handle the remote stream as needed\n            });\n          })\n          .catch((error) => console.error(\"Error accessing media devices:\", error));\n      }\n    });\n  };\n\n  const toggleScreenSharing = () => {\n    setScreensharing(!screensharing);\n  };\n\n  useEffect(() => {\n    initPeer();\n\n    return () => {\n      // Cleanup code (e.g., disconnect from the socket, close peer connections)\n    };\n  }, [screensharing, roomid]);\n\n  return (\n    <div>\n      <MediaPlayer\n        title=\"Tuturly Classroom\"\n        poster=\"https://image.mux.com/VZtzUzGRv02OhRnZCxcNg49OilvolTqdnFLEqBsTwaxU/thumbnail.webp?time=268&width=980\"\n        thumbnails=\"https://media-files.vidstack.io/sprite-fight/thumbnails.vtt\"\n        aspectRatio={16 / 9}\n        autoplay={true}\n        src={stream}\n        playsinline={true}\n      >\n        <MediaOutlet />\n        <MediaCommunitySkin />\n      </MediaPlayer>\n      <button onClick={toggleScreenSharing}>\n        {screensharing ? \"Stop Screen Sharing\" : \"Start Screen Sharing\"}\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}