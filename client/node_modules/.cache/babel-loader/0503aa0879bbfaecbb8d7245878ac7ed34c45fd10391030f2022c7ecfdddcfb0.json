{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/mobilestreamapp/client/src/Stream.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Peer from \"peerjs\";\nimport { MediaPlayer, MediaOutlet, MediaCommunitySkin } from \"@vidstack/react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stream() {\n  _s();\n  let [one, setOne] = useState(\"\");\n  let [screensharingStatus, setScreensharingStatus] = useState();\n  const socket = io(\"http://localhost:5000\");\n  // const socket = io(\"\");\n\n  const myVideoRef = useRef();\n  let {\n    id\n  } = useParams();\n  let roomid = id;\n  console.log(roomid);\n  const peerRef = useRef();\n  const initPeer = () => {\n    const peerInstance = new Peer();\n    peerRef.current = peerInstance;\n    peerInstance.on(\"open\", peerId => {\n      console.log(\"Connected to PeerJS with ID:\", peerId);\n      socket.emit(\"broadcaster\", roomid, peerId);\n    });\n    if (screensharingStatus) {\n      console.log(screensharingStatus);\n      navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        socket.emit(\"startScreenSharing\", roomid);\n        setOne(stream);\n        peerInstance.on(\"call\", call => {\n          console.log(\"Incoming call:\", call);\n          call.answer(stream);\n          // Answer the incoming call and send our stream\n\n          call.on(\"stream\", remoteStream => {\n            call.answer(stream);\n            console.log(\"first verse\");\n            // Handle the remote stream as needed\n          });\n        });\n      }).catch(error => console.error(\"Error accessing media devices:\", error));\n    } else {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(stream => {\n        // myVideoRef.current.srcObject = stream;\n        console.log(\"Stream obtained successfully:\", stream);\n        setOne(stream);\n        peerInstance.on(\"call\", call => {\n          console.log(\"Incoming call:\", call);\n          call.answer(stream);\n          // Answer the incoming call and send our stream\n\n          call.on(\"stream\", remoteStream => {\n            console.log(\"first verse\");\n            // Handle the remote stream as needed\n          });\n        });\n      }).catch(error => console.error(\"Error accessing media devices:\", error));\n    }\n  };\n  const toggleScreen = () => {\n    console.log(\"\");\n    setScreensharingStatus(true);\n  };\n  useEffect(() => {\n    initPeer();\n    return () => {\n      // Cleanup code (e.g., disconnect from the socket, close peer connections)\n    };\n  }, [screensharingStatus, roomid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MediaPlayer, {\n      title: \"Tuturly Classroom\",\n      poster: \"https://image.mux.com/VZtzUzGRv02OhRnZCxcNg49OilvolTqdnFLEqBsTwaxU/thumbnail.webp?time=268&width=980\",\n      thumbnails: \"https://media-files.vidstack.io/sprite-fight/thumbnails.vtt\",\n      aspectRatio: 16 / 9,\n      autoplay: true,\n      src: one,\n      playsinline: true,\n      children: [/*#__PURE__*/_jsxDEV(MediaOutlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MediaCommunitySkin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        toggleScreen();\n      },\n      children: \"Toggle ScreenSharing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(Stream, \"YWWl84QUC9jv85KqoP6FcLbxgpM=\", false, function () {\n  return [useParams];\n});\n_c = Stream;\nvar _c;\n$RefreshReg$(_c, \"Stream\");","map":{"version":3,"names":["React","useRef","useEffect","useState","io","Peer","MediaPlayer","MediaOutlet","MediaCommunitySkin","useParams","jsxDEV","_jsxDEV","Stream","_s","one","setOne","screensharingStatus","setScreensharingStatus","socket","myVideoRef","id","roomid","console","log","peerRef","initPeer","peerInstance","current","on","peerId","emit","navigator","mediaDevices","getDisplayMedia","video","audio","then","stream","call","answer","remoteStream","catch","error","getUserMedia","toggleScreen","children","title","poster","thumbnails","aspectRatio","autoplay","src","playsinline","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/user/Documents/mobilestreamapp/client/src/Stream.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Peer from \"peerjs\";\nimport { MediaPlayer, MediaOutlet, MediaCommunitySkin } from \"@vidstack/react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function Stream() {\n  let [one, setOne] = useState(\"\");\n\n  let [screensharingStatus, setScreensharingStatus] = useState();\n\n  const socket = io(\"http://localhost:5000\");\n  // const socket = io(\"\");\n\n  const myVideoRef = useRef();\n  let { id } = useParams();\n  let roomid = id;\n  console.log(roomid)\n  const peerRef = useRef();\n\n  const initPeer = () => {\n    const peerInstance = new Peer();\n\n    peerRef.current = peerInstance;\n\n    peerInstance.on(\"open\", (peerId) => {\n      console.log(\"Connected to PeerJS with ID:\", peerId);\n      socket.emit(\"broadcaster\", roomid, peerId);\n    });\n    if (screensharingStatus) {\n      console.log(screensharingStatus);\n      navigator.mediaDevices\n        .getDisplayMedia({ video: true, audio: true })\n        .then((stream) => {\n          socket.emit(\"startScreenSharing\", roomid);\n          setOne(stream);\n          peerInstance.on(\"call\", (call) => {\n            console.log(\"Incoming call:\", call);\n            call.answer(stream);\n            // Answer the incoming call and send our stream\n\n            call.on(\"stream\", (remoteStream) => {\n              call.answer(stream);\n\n              console.log(\"first verse\");\n              // Handle the remote stream as needed\n            });\n          });\n        })\n        .catch((error) =>\n          console.error(\"Error accessing media devices:\", error)\n        );\n    } else {\n      navigator.mediaDevices\n        .getUserMedia({ audio: true, video: true })\n        .then((stream) => {\n          // myVideoRef.current.srcObject = stream;\n          console.log(\"Stream obtained successfully:\", stream);\n          setOne(stream);\n          peerInstance.on(\"call\", (call) => {\n            console.log(\"Incoming call:\", call);\n            call.answer(stream);\n            // Answer the incoming call and send our stream\n\n            call.on(\"stream\", (remoteStream) => {\n              console.log(\"first verse\");\n              // Handle the remote stream as needed\n            });\n          });\n        })\n        .catch((error) =>\n          console.error(\"Error accessing media devices:\", error)\n        );\n    }\n  };\n  const toggleScreen = () => {\n    console.log(\"\");\n\n    setScreensharingStatus(true);\n  };\n  useEffect(() => {\n    initPeer();\n\n    return () => {\n      // Cleanup code (e.g., disconnect from the socket, close peer connections)\n    };\n  }, [screensharingStatus,roomid]);\n\n  return (\n    <div>\n      <MediaPlayer\n        title=\"Tuturly Classroom\"\n        poster=\"https://image.mux.com/VZtzUzGRv02OhRnZCxcNg49OilvolTqdnFLEqBsTwaxU/thumbnail.webp?time=268&width=980\"\n        thumbnails=\"https://media-files.vidstack.io/sprite-fight/thumbnails.vtt\"\n        aspectRatio={16 / 9}\n        autoplay={true}\n        src={one}\n        playsinline={true}\n      >\n        <MediaOutlet />\n\n        <MediaCommunitySkin />\n      </MediaPlayer>\n      <button\n        onClick={() => {\n          toggleScreen();\n        }}\n      >\n        Toggle ScreenSharing\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}